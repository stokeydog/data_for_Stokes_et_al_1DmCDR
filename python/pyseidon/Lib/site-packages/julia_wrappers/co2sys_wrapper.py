# co2sys_wrapper.py

'''
This script defines a function co2sys, which is callable from Julia. 
Because CO2SYS is only developed for MATLAB and python, 
this allows us to use PyCO2SYS in Julia
'''

from typing import Any, Dict, List, Optional
import PyCO2SYS as pyco2  # Ensure this matches the actual package name and API

def co2sys(kwargs: Dict[str, Any]) -> Optional[List[Any]]:
    """
    Wrapper function to call PyCO2SYS.

    Parameters are given in kwargs, e.g.

    kwargs = dict(
        par1_type = 1,  # The first parameter supplied is of type "1", which means "alkalinity"
        par1 = 2400,  # value of the first parameter
        par2_type = 3,  # The second parameter supplied is of type "3", which means "pH"
        par2 = 7.8,  # value of the second parameter
        salinity = 35,  # Salinity of the sample
        temperature = 25,  # Temperature at input conditions
        temperature_out = 2,  # Temperature at output conditions
        pressure = 0,  # Pressure    at input conditions
        pressure_out = 4000,  # Pressure    at output conditions
        total_silicate = 50,  # Concentration of silicate  in the sample (in umol/kg)
        total_phosphate = 2,  # Concentration of phosphate in the sample (in umol/kg)
        opt_pH_scale = 1,  # pH scale at which the input pH is reported ("1" means "Total Scale")
        opt_k_carbonic = 4,  # Choice of H2CO3 and HCO3- dissociation constants K1 and K2 ("4" means "Mehrbach refit")
        opt_k_bisulfate = 1,  # Choice of HSO4- dissociation constant KSO4 ("1" means "Dickson")
        opt_total_borate = 1,  # Choice of boron:sal ("1" means "Uppstrom")
    )

    Note that for a minimal kwargs input, it uses CO2SYS defaults.
    Review their documentation to see the defaults.

    Returns:
        list: CO2SYS output as a list
    """
    # Extract parameters from the dictionary
    results = pyco2.sys(**kwargs)

    if hasattr(results, 'tolist'):
        results = results.tolist()
    
    return results
